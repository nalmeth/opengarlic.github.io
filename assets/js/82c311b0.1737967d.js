"use strict";(self.webpackChunkopengarlic_site=self.webpackChunkopengarlic_site||[]).push([[572],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>y});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=l(t),d=r,y=p["".concat(c,".").concat(d)]||p[d]||u[d]||a;return t?o.createElement(y,s(s({ref:n},m),{},{components:t})):o.createElement(y,s({ref:n},m))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1399:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const a={},s="Modes",i={unversionedId:"Components/modes",id:"Components/modes",title:"Modes",description:"- The main logic of the game mode should go here.",source:"@site/docs/Components/modes.md",sourceDirName:"Components",slug:"/Components/modes",permalink:"/docs/Components/modes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Screens",permalink:"/docs/Components/screens"}},c={},l=[{value:"API",id:"api",level:2}],m={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modes"},"Modes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The main logic of the game mode should go here."),(0,r.kt)("li",{parentName:"ul"},"Stored in ",(0,r.kt)("em",{parentName:"li"},"client/src/components/games"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="client/src/components/games/MyGameMode.js"',title:'"client/src/components/games/MyGameMode.js"'},"/**\n * MyGameMode Component\n */\nconst MyGameMode = (props) => {\n\n    /**\n     * Game Logic Here\n     */\n\n    return (\n        <>\n        {props.gameScreen === 0 && <Screen0 {...props} />}\n        {props.gameScreen === 1 && <Screen1 {...props} />}\n        </>\n    )\n}\n\nexport default MyGameMode;\n\n/**\n * Component config and settings\n */\nexport const title = 'MyGameMode';\nexport const description = 'My mode plays like this...';\nexport const settings = {\n    maxPlayers: 8,\n    // other settings...\n}\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("p",null,"Game Mode Components receive the following props."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Game Lobby properties\n{\ncode:string,           // The lobby code\n\nowner:string,          // Name of the player that owns the lobby\n\nstatus:string,         // LobbyStatus Constants:\n                       // OPEN - Players are in the lobby waiting for game to start\n                       // STARTED - The game has been started. No new players allowed.\n                       // GAME - The game has ended\n\nappScreen:string,      // AppScreen Constants:\n                       // LOGIN - The login screen\n                       // LOBBY - The lobby screen\n                       // GAME  - This screen is what shows while a game is being played.\n\ngameScreen:number,     // Automatically increments by 1 for each game screen.\n                       // (So you can track what screen to show)\n\nround:number,          // Automatically increments by 1 for each round of the game.\n                       // Currently Not implemented\n\nmode:string,           // The title of the game mode. This is set in your game component.\n\nsettings:object,       // This is the json object of options available to your game mode.\n                       // You must configure the predefined settings. You may add any others you want.\n                       // Predefined settings:\n                       // maxPlayers:number   - The maximum number of players allowed.\n                       // groupSize:number    - Required group amount.\n                       //                        (Groups of 2: 2, Groups of 3: 3, etc.)\n                       //                        (This is not currently implemented)\n                       // time:number         - Per game screen timer in seconds.\n                       //                        (0 = infinite)\n                       //                        (This is not currently implemented)\n\nplayers:Array<object>, // List of players in the game and their info\n                       // Each player has the following properties\n                       // name:string      - The name of the player\n                       // owner:boolean    - Flag of lobby ownership\n                       // status:string    - PlayerStatus Constant\n                       //                    ACTIVE        - Player is ready\n                       //                    DONE          - Player has pressed done\n                       // connected:string - ConnectionStatus Constant\n                       //                    CONNECTED     - Player is connected\n                       //                    DISCONNECTED  - Player is disconnected\n\n// Other properties\nsocket:object,          // The websocket to emit/listen for custom events\nplayerName:string,      // Name of the the player\n\nlobbyData:object,       // Json data store that can be used to store images, text, etc\n                        // Formatting is completely up to the game mode\n\nonGameEnd:function,     // Callback to fire when you want the game to end\n\nonRoundEnd:function,     // Callback to fire when you want the round to end (Not yet implemented)\n\nonDone:function(data:object),    // Callback to fire when you want to mark a player as done\n                                 // data:object    - Data to save in the lobbyData storage\n\nonQuit:function(),       // Callback to fire when a player quits the lobby\n}\n")))}u.isMDXComponent=!0}}]);